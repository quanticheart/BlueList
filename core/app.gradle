ext {
    // sdk and tools
    //==============================================================================================
    minSdkVersion = 23
    targetSdkVersion = 30
    compileSdkVersion = 30
    buildToolsVersion = '30.0.2'

    //    Kotlin
    //==============================================================================================
    versions = [
            kotlin    : '1.4.31',
            lifecycle : '2.2.0',
            navigation: '2.0.0',
            koin      : '2.0.1'
    ]

    kotlin = [
            kotlin    : "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$versions.kotlin",
            coroutines: 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'
    ]
    kotlinLibs = kotlin.values()

    //    Android X
    //==============================================================================================
    androidx = [
            appcompat          : 'androidx.appcompat:appcompat:1.3.0',
            core               : 'androidx.core:core-ktx:1.5.0',
            constraintlayout   : 'androidx.constraintlayout:constraintlayout:1.1.3',
            recyclerview       : 'androidx.recyclerview:recyclerview:1.0.0',
            material           : 'com.google.android.material:material:1.3.0',
            cardview           : 'androidx.cardview:cardview:1.0.0',
            lifecycle          : "androidx.lifecycle:lifecycle-extensions:$versions.lifecycle",
            lifecycle_run_time : "androidx.lifecycle:lifecycle-runtime:$versions.lifecycle",
            lifecycle_viewmodel: "androidx.lifecycle:lifecycle-viewmodel-ktx:$versions.lifecycle",
            navigation_fragment: "androidx.navigation:navigation-fragment-ktx:$versions.navigation",
            navigation_ui      : "androidx.navigation:navigation-ui-ktx:$versions.navigation",
            glide              : 'com.github.bumptech.glide:glide:4.12.0',
    ]
    androidxLibs = androidx.values()

    kapt = [
            glideProcessor: 'com.github.bumptech.glide:compiler:4.12.0'
    ]

    kaptLibs = kapt.values()

    //    Inject
    //==============================================================================================
    inject = [
            koin          : "org.koin:koin-android:${versions.koin}",
            koin_viewmodel: "org.koin:koin-android-viewmodel:${versions.koin}"
    ]
    injectLibs = inject.values()

    //    Permissions
    //==============================================================================================
    permission = [
            permissionsdispatcher: 'org.permissionsdispatcher:permissionsdispatcher:4.6.0',
            processor_kapt       : 'org.permissionsdispatcher:permissionsdispatcher-processor:4.6.0'
    ]
    permissions = permission.values()

    //    Repository
    //==============================================================================================
    repositoryVersions = [
            room    : '2.3.0',
            retrofit: '2.6.2',
    ]

    database = [
            room          : "androidx.room:room-runtime:$repositoryVersions.room",
            room_coroutine: "androidx.room:room-ktx:$repositoryVersions.room",
    ]

    network = [
            logging            : 'com.squareup.okhttp3:logging-interceptor:4.2.2',
            retrofit2          : "com.squareup.retrofit2:retrofit:$repositoryVersions.retrofit",
            retrofit2_converter: "com.squareup.retrofit2:converter-gson:$repositoryVersions.retrofit"
    ]

    commons = [
            timber: "com.jakewharton.timber:timber:4.7.1"
    ]

    def app = []
    app.addAll(kotlin.values())
    app.addAll(androidx.values())
    app.addAll(inject.values())
    appLibs = app.asCollection()

    def core = []
    core.addAll(kotlin.values())
    core.addAll(inject.values())
    core.addAll(commons.values())
    core.addAll(androidx.values())
    coreLibs = core.asCollection()

    def data = []
    data.addAll(kotlin.values())
    data.addAll(inject.values())
    data.addAll(database.values())
    data.addAll(network.values())
    dataLibs = data.asCollection()

    def domain = []
    domain.addAll(kotlin.values())
    domain.addAll(inject.values())
    domainLibs = domain.asCollection()

    //    KTLint for review Kotlin Code
    //==============================================================================================
    ktlintLib = [
            sdk: 'com.pinterest:ktlint:0.32.0'
    ]

    //    Tests
    //==============================================================================================
    testApp = [
            runner  : 'androidx.test:runner:1.2.0',
            espresso: 'androidx.test.espresso:espresso-core:3.2.0',
            junit   : 'androidx.test.ext:junit:1.1.1',
            testing : 'androidx.arch.core:core-testing:2.0.1'
    ]
    testImplement = 'junit:junit:4.12'
    testLibs = testApp.values()

    roomTest = "androidx.room:room-testing:$versions.room"
    kaptRoom = "androidx.room:room-compiler:$versions.room"
}
